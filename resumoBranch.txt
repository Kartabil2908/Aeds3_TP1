üéÅ Resumo do Projeto: PresenteF√°cil 1.0
==================================================

‚ú® Funcionalidades Principais
--------------------------------------------------

* Gest√£o Completa de Utilizadores:
    - Criar, ler, atualizar e apagar utilizadores.

* Autentica√ß√£o:
    - Sistema de login com verifica√ß√£o de e-mail e palavra-passe.

* Dois Tipos de Exclus√£o:
    1. Desativar Conta (Soft Delete):
        - Marca o utilizador como "inativo" mas mant√©m os dados.
        - O utilizador desativado n√£o pode fazer login.
    2. Excluir Conta (Hard Delete):
        - Apaga permanentemente os dados do utilizador.
        - Liberta o espa√ßo para ser reutilizado.


üõ†Ô∏è Arquitetura T√©cnica
--------------------------------------------------

* Persist√™ncia em baixo n√≠vel:

    - Ficheiros Bin√°rios:
        - Todos os dados s√£o guardados em arquivos `.db` na pasta `data/usuarios`.
        - O ficheiro principal √© `usuarios.db`.

    - Indexa√ß√£o com Hash Extens√≠vel:
        - √çndice Prim√°rio: busca r√°pida por `ID`.
        - √çndice Secund√°rio: busca por `e-mail` (essencial para login).

====================================================================================================================


üéÅ An√°lise Detalhada do Projeto: PresenteF√°cil 1.0
==================================================

1. Fluxo de uma Opera√ß√£o: A Jornada de um Login
--------------------------------------------------

1. Interface (UI Layer):
    - Terminal captura e-mail e palavra-passe.
    - Invoca o `ControladorUsuario`.

2. L√≥gica de Neg√≥cio:
    - `ControladorUsuario` chama `arqUsuarios.read(email)`.

3. Acesso a Dados:
    a. `ArquivoUsuario` consulta o √çndice Secund√°rio por E-mail.
    b. Calcula o hash e acessa `indiceIndiretoEmail`.
    c. Retorna o `ID` correspondente.
    d. Com o `ID`, chama `super.read(id)`.
    e. A classe `Arquivo` consulta o √çndice Prim√°rio.
    f. Localiza endere√ßo em bytes nos ficheiros `usuarios.d.db` e `usuarios.c.db`.
    g. Usa `seek(endereco)` para acessar direto o registo.
    h. Desserializa os dados e reconstr√≥i o objeto `Usuario`.

4. Conclus√£o:
    - Verifica hash da password e se o campo `ativo` √© `true`.

5. Feedback:
    - Resultado do login √© retornado ao terminal.


2. An√°lise Profunda da Camada de Persist√™ncia
--------------------------------------------------

2.1. Ficheiro de Dados Principal (`usuarios.db`)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Estrutura Bin√°ria:
    - Cabe√ßalho (12 bytes):
        - √∫ltimo ID (4 bytes)
        - ponteiro da lista de livres (8 bytes)

    - Registo:
        - L√°pide (1 byte): `' '` (ativo) ou `'*'` (apagado)
        - Tamanho do registo (2 bytes)
        - Dados serializados (n bytes)

* Gest√£o de Espa√ßo:
    - `delete`: marca como exclu√≠do e insere em lista de espa√ßos livres.
    - `create`: reutiliza espa√ßo livre, se poss√≠vel.

2.2. Indexa√ß√£o: A Magia do Hash Extens√≠vel
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Estrutura:
    - Diret√≥rio `.d.db`: array de ponteiros (2^pG entradas)
    - Cestos `.c.db`: blocos com dados (ex: `ParEmailID`)

* Inser√ß√£o:
    1. Calcula hash da chave.
    2. Usa `pG` bits para encontrar entrada no diret√≥rio.
    3. Localiza e atualiza cesto no ficheiro.

* Cesto Cheio:
    - Divide o cesto.
    - Redistribui elementos.
    - Atualiza ponteiros no diret√≥rio.
    - Se necess√°rio, duplica diret√≥rio (aumenta pG).

* √çndices:
    - Prim√°rio: `ParIDEndereco (ID -> Endere√ßo)`
    - Secund√°rio: `ParEmailID (hash(E-mail) -> ID)`


3. Conclus√£o Final
--------------------------------------------------

- Acesso aleat√≥rio a ficheiros
- Serializa√ß√£o de objetos
- Reaproveitamento de espa√ßo e controle de fragmenta√ß√£o
- Indexa√ß√£o prim√°ria e secund√°ria
- Hash extens√≠vel persistente
- Arquitetura multi-camada

